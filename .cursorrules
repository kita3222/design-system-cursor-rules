# デザインシステム開発ルール

このドキュメントでは、デザインシステムの開発と管理に関する標準的なルールと指針を定義します。デザインシステムの構築と拡張に関わるすべての作業は、以下のルールに従って進めてください。

## 1. 開発の基本原則

### 1.1 段階的開発フローの徹底

- `.cursor/flow/designSystemFlow.md` に定義された開発フローを厳格に遵守
- 各フェーズは順序に従って実施し、前のフェーズの成果物をインプットとして活用
- フェーズごとに明確な成果物と完了基準を定義

### 1.2 一貫性の確保

- デザイン原則に基づいたすべての決定
- 命名規則の統一
- コンポーネント設計パターンの一貫した適用
- カラー、タイポグラフィ、スペーシングなどの基本要素の一貫した使用

### 1.3 アクセシビリティの重視

- すべてのコンポーネントはWCAG AAレベルを目標に設計・実装
- キーボードナビゲーションのサポート
- スクリーンリーダー対応の確保
- 十分なコントラスト比の確保

### 1.4 品質管理

- コードレビューの徹底
- 自動テストの実装
- デザインレビューの実施
- ユーザビリティテストの実施

## 2. プロジェクト構造

### 2.1 メモリバンク(.cursor)の構成

```
.cursor/
├── memory/                # プロジェクトの記憶
│   ├── progress.md        # 進捗状況の記録
│   ├── activeContext.md   # 現在の開発コンテキスト
│   └── summary.md         # プロジェクト全体の要約と重要ポイント
├── flow/
│   └── designSystemFlow.md # 開発フロー定義
├── components/           # コンポーネント定義
│   ├── componentList.md   # コンポーネント一覧
│   └── componentTemplate.md # コンポーネント仕様書テンプレート
└── rules/                # デザインシステム規則
    ├── designPrinciples.md # デザイン原則
    ├── colorSystem.md     # カラーシステム定義
    ├── typographySystem.md # タイポグラフィシステム定義
    └── spacingSystem.md   # スペーシングシステム定義
```

### 2.2 コンポーネントディレクトリ構造

```
components/
├── core/                  # コアコンポーネント
│   ├── Button/            # 個別コンポーネントディレクトリ
│   │   ├── Button.jsx     # コンポーネント実装
│   │   ├── Button.test.jsx # テストファイル
│   │   ├── Button.stories.jsx # Storybookストーリー
│   │   └── README.md      # コンポーネントドキュメント
│   ├── Input/
│   └── ...
└── composite/             # 複合コンポーネント
    ├── Card/
    ├── Modal/
    └── ...
```

## 3. コンポーネント開発ルール

### 3.1 コンポーネント仕様書

各コンポーネントの開発前に、以下の項目を含む仕様書を作成：

- 目的と使用シナリオ
- バリアントとプロパティ
- 状態とインタラクション
- アクセシビリティ要件
- テスト要件
- 使用例

### 3.2 コンポーネント実装基準

- プロパティの適切な型定義と文書化
- デフォルト値の設定
- アクセシビリティ属性の実装
- レスポンシブ対応
- パフォーマンス最適化
- ブラウザ互換性の確保

### 3.3 デザイントークンの使用

- ハードコードされた値ではなく、定義されたデザイントークンを使用
- 独自の値の追加が必要な場合は、デザイントークンシステムに追加
- コンポーネント間で一貫したトークン使用を確保

### 3.4 ドキュメント作成

- 各コンポーネントには詳細なREADMEを作成
- プロパティの詳細説明
- 使用例とコードサンプル
- アクセシビリティ情報
- 関連コンポーネントへの参照

## 4. 変更管理とバージョニング

### 4.1 変更プロセス

1. 新機能や変更の提案
2. 仕様書の作成・更新
3. デザインレビュー
4. 実装
5. コードレビュー
6. テスト
7. ドキュメント更新
8. リリース

### 4.2 バージョニング

- セマンティックバージョニング (MAJOR.MINOR.PATCH) の採用
- MEJORバージョン: 互換性を破壊する変更
- MINORバージョン: 後方互換性のある機能追加
- PATCHバージョン: 後方互換性のあるバグ修正

### 4.3 変更ログ

- すべての変更は変更ログに記録
- 変更の内容、理由、影響範囲を文書化
- 更新者と日付の記録

## 5. 品質保証

### 5.1 テスト要件

- ユニットテスト: 各コンポーネントの機能テスト
- インテグレーションテスト: コンポーネント間の相互作用テスト
- ビジュアルリグレッションテスト: 見た目の変化を検出
- アクセシビリティテスト: WCAG準拠の確認
- パフォーマンステスト: レンダリングとインタラクションのパフォーマンス

### 5.2 コードレビュー

- すべての変更はコードレビューを通過する必要がある
- コーディング規約準拠の確認
- アクセシビリティの確認
- パフォーマンスの検証
- セキュリティの確認

### 5.3 定期的な監査

- 全コンポーネントの定期的なアクセシビリティ監査
- 未使用コンポーネントの特定と整理
- トークン使用の一貫性の確認
- ドキュメントの正確性の確認

## 6. コラボレーションと意思決定

### 6.1 チーム構成

- デザイナー、開発者、アクセシビリティ専門家、製品マネージャーの多機能チーム
- 明確な役割と責任の定義
- 定期的なミーティングとレビュー

### 6.2 意思決定プロセス

- 主要な決定は複数の利害関係者による合意
- デザイン原則に基づいた評価
- ユーザー中心のアプローチ
- データと検証結果に基づく意思決定

### 6.3 フィードバックループ

- ユーザーからのフィードバック収集メカニズム
- 内部ステークホルダーからの継続的なフィードバック
- フィードバックの分析と優先順位付け
- 改善計画への反映

## 7. デザインシステム導入と普及

### 7.1 導入戦略

- 段階的な導入アプローチ
- 初期の早期採用者の特定
- 成功事例の共有
- トレーニングとサポート提供

### 7.2 教育と普及活動

- 定期的なワークショップとトレーニングセッション
- 詳細なドキュメントとガイドライン
- デザインシステムの使用をサポートするチャンネルの確立
- 成功事例と学びの共有

## 8. 更新と拡張

### 8.1 定期的な評価と更新

- トレンドと技術の進化のモニタリング
- ユーザーニーズの変化への対応
- 定期的なデザインシステムのヘルスチェック
- 継続的な改善計画

### 8.2 拡張ガイドライン

- 新しいコンポーネントの追加プロセス
- 既存コンポーネントの拡張方法
- 互換性を保つための考慮事項
- 拡張の優先順位付け

## 9. 重要なリファレンス

開発活動において、以下のドキュメントを参照してください：

- **デザインシステムフロー**: `.cursor/flow/designSystemFlow.md`
- **進捗状況**: `.cursor/memory/progress.md`
- **開発コンテキスト**: `.cursor/memory/activeContext.md`
- **デザイン原則**: `.cursor/rules/designPrinciples.md`
- **カラーシステム**: `.cursor/rules/colorSystem.md`
- **タイポグラフィシステム**: `.cursor/rules/typographySystem.md`
- **スペーシングシステム**: `.cursor/rules/spacingSystem.md`
- **コンポーネントリスト**: `.cursor/components/componentList.md` 